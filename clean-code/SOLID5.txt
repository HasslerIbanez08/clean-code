- Crear interfaces que definan el comportamiento que debe las clases para poder funcionar como mecanismo de persistencia o como m√©todo de pago.

 - Hacer que estos objetos se pasen por constructor.
	
c


public static void main(String[] args) {
		SqlDatabase sqlDataBase = new SqlDatabase();
		CreditCard creditCard = new CreditCard();
		ShoppingProduct shoppingProduct = new ShoopingProduct();
		
		Shopping shopping = new Shopping(sqlDataBase,creditCard);
		shopping.buy(shoppingProduct);
		shopping.saveBuy(shoppingProduct);
	}

	public interface ShoppingService {
		void buy(ShoppingProduct shopping);
		void saveBuy(ShoppingProduct shopping);
	}
	public class Shopping implements ShoppingService{
		private SqlDataBase sqlDataBase;
		private CreditCar creditCard;
		
		
		
		public Shopping(SqlDataBase sqlDataBase, CreditCar creditCard) {
			super();
			this.sqlDataBase = sqlDataBase;
			this.creditCard = creditCard;
		}

		@Override
		public void buy(ShoppingProduct shoppingProduct) {
			creditCard.pay(shoppingProduct);
			
		}

		@Override
		public void saveBuy(ShoppingProduct shoppingProduct) {
			sqlDataBase.save(shoppingProduct);
			
		}
		
	}
